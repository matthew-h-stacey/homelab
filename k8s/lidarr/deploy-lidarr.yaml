apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: sc-nfs-lidarr-music
  namespace: lidarr
provisioner: nfs.csi.k8s.io
parameters:
  server: 10.10.250.254
  share: /mnt/Tank1/media/Music
reclaimPolicy: Delete
volumeBindingMode: Immediate
mountOptions:
  - nfsvers=4.1
---
apiVersion: v1
kind: PersistentVolume
metadata:
  annotations:
    pv.kubernetes.io/provisioned-by: nfs.csi.k8s.io
  name: pv-nfs-lidarr-music
spec:
  capacity:
    storage: 10Gi
  accessModes:
    - ReadWriteMany
  persistentVolumeReclaimPolicy: Retain
  storageClassName: sc-nfs-lidarr-music
  mountOptions:
    - nfsvers=4.1
  csi:
    driver: nfs.csi.k8s.io
    # volumeHandle format: {nfs-server-address}#{sub-dir-name}#{share-name}
    # make sure this value is unique for every share in the cluster
    volumeHandle: 10.10.250.254#/mnt/Tank1/media/Music#lidarr
    volumeAttributes:
      server: 10.10.250.254
      share: /mnt/Tank1/media/Music
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: pvc-nfs-lidarr-music
  namespace: lidarr
spec:
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 10Gi
  volumeName: pv-nfs-lidarr-music
  storageClassName: sc-nfs-lidarr-music
---
apiVersion: v1
kind: Service
metadata:
  name: lidarr
  namespace: lidarr
spec:
  selector:
    app: lidarr
  ports:
    - port: 8686
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: ingress-lidarr
  namespace: lidarr
  annotations:
    kubernetes.io/ingress.class: "nginx"
spec:
  tls:
    - hosts:
        - lidarr.camelotlab.xyz
      secretName: nginx-wildcard
  rules:
    - host: lidarr.camelotlab.xyz
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: lidarr
                port:
                  number: prowlarr
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: lidarr
  namespace: lidarr
spec:
  replicas: 1
  selector:
    matchLabels:
      app: lidarr
  template:
    metadata:
      labels:
        app: lidarr
    spec:
      # Add the initContainers section
      initContainers:
      - name: init-permissions
        image: busybox:latest # Use a lightweight image
        command: ['sh', '-c', 'chown -R 1000:1000 /config']
        volumeMounts:
        - name: music
          mountPath: /music
        - name: config
          mountPath: /config
      containers:
      - name: lidarr
        image: lscr.io/linuxserver/lidarr
        ports:
        - containerPort: 8686
        volumeMounts:
        - name: music
          mountPath: /music
        - name: config
          mountPath: /config
      volumes:
      - name: music
        persistentVolumeClaim:
          claimName: pvc-nfs-lidarr-music
      - name: config
        persistentVolumeClaim:
          claimName: pvc-lh-lidarr-config